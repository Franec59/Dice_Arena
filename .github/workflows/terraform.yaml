name: 'Terraform'

on:
  push:
    branches:
    - dev
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        # tf_actions_cli_credentials_hostname: app.terraform.io 
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./gcp
      run: terraform init
      env:
        TF_VAR_credentials: ${{ secrets.TF_API_TOKEN }}
        TF_VAR_ssh_key: ${{ secrets.SSH_KEY }}
        TF_VAR_mongodbatlas_public_key: ${{ secrets.API_PUBLIC_KEY }}
        TF_VAR_mongodbatlas_private_key: ${{ secrets.API_PRIVATE_KEY }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./gcp
      run: terraform plan
      env:
        TF_VAR_credentials: ${{ secrets.TF_API_TOKEN }}
        TF_VAR_ssh_key: ${{ secrets.SSH_KEY }}
        TF_VAR_mongodbatlas_public_key: ${{ secrets.API_PUBLIC_KEY }}
        TF_VAR_mongodbatlas_private_key: ${{ secrets.API_PRIVATE_KEY }}

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ./gcp
      run: terraform apply -auto-approve
      env:
        TF_VAR_credentials: ${{ secrets.TF_API_TOKEN }}
        TF_VAR_ssh_key: ${{ secrets.SSH_KEY }}
        TF_VAR_mongodbatlas_public_key: ${{ secrets.API_PUBLIC_KEY }}
        TF_VAR_mongodbatlas_private_key: ${{ secrets.API_PRIVATE_KEY }}

  # Installation:
  #   needs: terraform
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Git clone
  #       run: git clone https://github.com/Franec59/Dice_Arena.git
  #     - name: Permission
  #       working-directory: ./Dice_Arena
  #       run: chmod 775 launch.sh
  #     - name: execution du script
  #       working-directory: ./Dice_Arena
  #       run: ./launch.sh
  #       env:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

